{"name":"SharpCover.NetCrawler","body":"SharpCover.NetCrawler\r\n=====================\r\n\r\nCurrently under development!\r\n\r\nReleased under dual license, Affero GPL and Comercial License. Contact us for pricing, customizations, support.\r\n\r\n**Usage example:**\r\n\r\n  The model:\r\n  \r\n    [CrawlWithXPath(\"//*[@id='productInfo']\")]\r\n    class TestAppStoreProduct\r\n    {\r\n        [CrawlWithXPath(\"./div[@class='title']/h1/text()\")]\r\n        public string Title { get; set; }\r\n\r\n        [CrawlWithXPath(\"./div[@class='description']/text()\")]\r\n        public string Description { get; set; }\r\n\r\n        [CrawlWithRegex(\"class\\\\s*=\\\\s*['\\\"]gallery['\\\"].+?src\\\\s*=\\\\s*['\\\"]([^\\\"]+)\", MatchGroup=1)]\r\n        public string IconUrl { get; set; }\r\n    }\r\n  \r\n  Loading XHTML document and parsing data into the model:\r\n  \r\n      var content = new XHtmlContent();\r\n      content.LoadFromFile(\"product-info.html\");\r\n\r\n      var crawler = new NetCrawler(content);\r\n      var quickTimeProduct = crawler.Crawl<TestAppStoreProduct>();\r\n      \r\n\r\nFeatures:\r\n- Parse data directly into model based on class and property attributes\r\n- Class attribute to filter content down to a section before extracting content into class properties\r\n- Ability to stack crawlers, so a property can be extracted by doing an XPath operation followed by a Regex\r\n- XPath crawler that works with XHTML (with Agility Pack) and XML\r\n- Regex crawler\r\n- Default Value if content is not matched or optionally throw exception\r\n- Parse List of objects (for example a products list)\r\n\r\nTODO:\r\n- custom type crawler\r\n- StripHtml crawler\r\n- Regex.Replace crawler\r\n- Follow nested modeles (members of the \"root\" model) to further exract data\r\n- handle filling types other than strings in the model\r\n- add logging\r\n","tagline":"","google":"UA-32725413-2","note":"Don't delete this file! It's used internally to help with page regeneration."}